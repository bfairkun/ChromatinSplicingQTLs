
configfile: "config/config.yaml"

include: "rules/common.py"
include: "rules/DownloadAndPreprocess.smk"
include: "rules/Alignment.smk"
include: "rules/MakeBigwigs.smk"
# include: "rules/CutAndTagChecks.smk"
include: "rules/QC.smk"
include: "rules/ExpressionAnalysis.smk"
include: "rules/SplicingAnalysis.smk"
include: "rules/ChromatinPehnotypesAnalysis.smk"
include: "rules/ProSeqAnalysis.smk"
include: "rules/QTLTools.smk"
# include: "rules/other.smk"
# include: "rules/DownloadData.smk"
# include: "rules/RNASeqProcessing.smk"
# include: "rules/Genotypes.smk"
# include: "rules/ChIPSeqProcessing.smk"
# include: "rules/PlotGruberExamples.smk"
# include: "rules/RASQUAL.smk"

wildcard_constraints:
    chrom="|".join(autosomes),
    IndID="|".join(Fastq_samples['IndID']),
    Rep="\d+"

localrules: all, CopyFastqFromLocal, DownloadFastqFromLink, Download1KG_GRCh38, STAR_make_index, DownloadHg38Ref, DownloadFasterqDump_SE
ruleorder: CopyFastqFromLocal > DownloadFastqFromLink

MyPhenotypes = ["chRNA.IR", "Expression.Splicing", "chRNA.Expression.Splicing", "H3K4ME1", "H3K27AC", "CTCF", "H3K4ME3", "chRNA.Splicing", "polyA.Splicing"]

rule all:
    input:
        # expand("logs/PlotGruberQTLs/PlotFromShellScript.{pheno}.log", pheno=["H3K4ME3", "H3K27AC", "H3K4ME1"]),
        # "QTLs/sQTLs/permutation_pass_chunks/1.1000.txt.gz",
        # expand("FastqFastp/{Phenotype}/{IndID}/{Rep}.R2.fastq.gz", zip, Phenotype=Fastq_samples['Phenotype'], IndID=Fastq_samples['IndID'], Rep=Fastq_samples['RepNumber']),
        # expand("Alignments/Hisat2_Align/{Phenotype}/{IndID}.{Rep}.wasp_filterd.markdup.sorted.bam", zip, Phenotype= ChromatinProfilingSamples_df['Phenotype'], IndID=ChromatinProfilingSamples_df['IndID'], Rep=ChromatinProfilingSamples_df['RepNumber']),
        # expand("Alignments/STAR_Align/{Phenotype}/{IndID}/{Rep}/Filtered.bam", zip, Phenotype=RNASeqSamples_df['Phenotype'], IndID=RNASeqSamples_df['IndID'], Rep=RNASeqSamples_df['RepNumber']),
        # expand("bigwigs/{Phenotype}/{IndID}.{Rep}.bw", zip, Phenotype=Fastq_samples['Phenotype'], IndID=Fastq_samples['IndID'], Rep=Fastq_samples['RepNumber']),
        expand("QC/mbv/plots/{Phenotype}/{IndID}.{Rep}.pdf", zip, Phenotype=chRNASeqSamples_df['Phenotype'], IndID=chRNASeqSamples_df['IndID'], Rep=chRNASeqSamples_df['RepNumber']),
        #Make bigwigs from test cut and tag
        # "../output/QC/AutosomeCountsPerSamples.tsv",
        # expand("bigwigs_FromNonWASPFilteredReads/{Phenotype}/{IndID}.{Rep}.bw", Phenotype=["POL2S5", "POL2S2", "H3K9ME3", "H3K36ME3", "H3K79ME2"], IndID="NA19210", Rep="1"),
        multiext("ReferenceGenome/Annotations/gencode.v34.primary_assembly.annotation.gtf", "_all_exons.txt.gz", "_all_introns.bed.gz", "_fiveprime.bed.gz", "_threeprime.bed.gz"),
        expand("SplicingAnalysis/IR/{Phenotype}/Counts.txt", Phenotype=RNASeqPhenotypes),
        # expand("PeakCalling/{Phenotype}.peaks.saf", Phenotype=ChromatinProfilingPhenotypes)
        # expand("SplicingAnalysis/leafcutter/clustering/chr{chrom}/leafcutter_perind.counts.gz", chrom=autosomes),
        "SplicingAnalysis/leafcutter/clustering/autosomes/leafcutter_perind.counts.gz",
        expand("featureCounts/{Phenotype}/Counts.txt", Phenotype=RNASeqExpressionPhenotypes + ["H3K4ME3", "H3K4ME1", "H3K27AC"]),
        expand("QTLs/QTLTools/{Phenotype}/OnlyFirstReps.sorted.qqnorm.bed.pca", Phenotype=["chRNA.IR", "Expression.Splicing", "H3K4ME1", "H3K27AC", "CTCF", "H3K4ME3"]),
        "QTLs/QTLTools/Expression.Splicing/Genotypes/WholeGenome.vcf.gz",
        # "Multiqc/multiqc_report.html",
        expand("QTLs/QTLTools/{Phenotype}/PermutationPass.FDR_Added.txt.gz", Phenotype=MyPhenotypes),
        expand("featureCounts/{Phenotype}/NormFactors.tsv", Phenotype=["chRNA.Expression.Splicing", "Expression.Splicing", "H3K4ME1", "H3K4ME3", "H3K27AC", "CTCF"])

rule Gather_chRNASeq_Fastq:
    """
    Useful to force rexecution of all chRNAseq related analysis after
    identifying sample swaps and correcting them in samples.tsv config
    """
    input:
        expand("Fastq/{Phenotype}/{IndID}/{Rep}.R1.fastq.gz", zip, Phenotype=chRNASeqSamples_df['Phenotype'], IndID=chRNASeqSamples_df['IndID'], Rep=chRNASeqSamples_df['RepNumber']),

rule Macs2PeakCalling_narrow:
    input:
        bams = GetBamForPhenotype
    output:
        peaks = "PeakCalling/{Phenotype}_peaks.narrowPeak",
        saf = "PeakCalling/{Phenotype}_peaks.narrowPeak.saf"
    log:
        "logs/Macs2PeakCalling_narrow/{Phenotype}.log"
    resources:
        mem = 58000
    params:
        "--tempdir /scratch/midway2/bjf79/ --outdir PeakCalling/ --name {Phenotype}"
    shell:
        """
        macs2 callpeak {params} -f BAMPE --name {wildcards.Phenotype} -t {input.bams} &> {log}
        awk -F'\\t' -v OFS='\\t' 'BEGIN {{ print "GeneID", "Chr", "Start", "End", "Strand" }} {{ print $4, $1, $2, $3, $6 }}' {output.peaks} > {output.saf}
        """

use rule Macs2PeakCalling_narrow as Macs2PeakCalling_broad with:
    output:
        peaks = "PeakCalling/{Phenotype}_peaks.broadPeak",
        saf = "PeakCalling/{Phenotype}_peaks.broadPeak.saf"
    params:
        "--tempdir /scratch/midway2/bjf79/ --outdir PeakCalling/ --name {Phenotype} --broad"
    log:
        "logs/Macs2PeakCalling_broad/{Phenotype}.log"

use rule Macs2PeakCalling_narrow as Macs2PeakCalling_narrow_perind with:
    input:
        bams = "Alignments/Hisat2_Align/{Phenotype}/{IndID}.{Rep}.wasp_filterd.markdup.sorted.bam"
    output:
        peaks = "PeakCallingPerInd/{Phenotype}/{IndID}.{Rep}_peaks.narrowPeak",
        saf = "PeakCallingPerInd/{Phenotype}/{IndID}.{Rep}_peaks.narrowPeak.saf"
    params:
        "--tempdir /scratch/midway2/bjf79/ --outdir PeakCallingPerInd/{Phenotype}/ --name {IndID}.{Rep}"
    log:
        "logs/Macs2PeakCalling_narrow_perind/{Phenotype}/{IndID}.{Rep}.log"

use rule Macs2PeakCalling_narrow as Macs2PeakCalling_broad_perind with:
    input:
        bams = "Alignments/Hisat2_Align/{Phenotype}/{IndID}.{Rep}.wasp_filterd.markdup.sorted.bam"
    output:
        peaks = "PeakCallingPerInd/{Phenotype}/{IndID}.{Rep}_peaks.broadPeak",
        saf = "PeakCallingPerInd/{Phenotype}/{IndID}.{Rep}_peaks.broadPeak.saf"
    params:
        "--tempdir /scratch/midway2/bjf79/ --outdir PeakCallingPerInd/{Phenotype}/ --name {IndID}.{Rep} --broad"
    log:
        "logs/Macs2PeakCalling_broad_perind/{Phenotype}/{IndID}.{Rep}.log"

rule featureCounts:
    input:
        bam = GetBamForPhenotype,
        annotations = GetAnnotationsForPhenotype
    output:
        "featureCounts/{Phenotype}/Counts.txt"
    params:
        extraParams = GetFeatureCountsParams,
    threads:
        8
    resources:
        mem = 12000,
        cpus_per_node = 9,
    log:
        "logs/featureCounts/{Phenotype}.log"
    shell:
        """
        featureCounts -p {params.extraParams} -T {threads} --ignoreDup --primary -a {input.annotations} -o {output} {input.bam} &> {log}
        """

# rule PreparePhenotypeTablesFromFeatureCounts:
#     input:
#         "featureCounts/{Phenotype}/Counts.txt"
#     output:
#         Y = "QTLtools/{Phenotype}.bed.gz",
#     log:
#         "logs/PreparePhenotypeTablesFromFeatureCounts/{Phenotype}.log"
#     shell:
#         """
#         Rscript
#         """

# def GetReplicateBams(wildcards):
#     if wildcards.P

# rule MergeReplicates:
#     input:
#         bams = GetReplicateBams
#     output:
#         bam = "Alignments/{Phenotype}/{IndID}.bam"
#         bai = "Alignments/{Phenotype}/{IndID}.bam.bai"
#     log:
#         "logs/MergeReplicates/{Phenotype}/{IndID}.log"
#     shell:
#         """
#         samtools merge {output.bam} {input} &> {log}
#         samtools index {output.bam}
#         """



